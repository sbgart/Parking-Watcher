// telegram-updates.js
import fs from 'node:fs';
import path from 'node:path';
import { sendTelegram } from './notification-manager.js';
import { telegram } from './config.js';

const dataDir = path.resolve('./data');
let isCheckingUpdates = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
let conflictErrorCount = 0;
const MAX_CONFLICT_ERRORS = 3;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è webhook
async function deleteWebhook() {
  try {
    const url = `https://api.telegram.org/bot${telegram.botToken}/deleteWebhook?drop_pending_updates=true`;
    const response = await fetch(url, { method: 'POST' });
    const data = await response.json();
    
    if (data.ok) {
      console.log('‚úÖ Webhook —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      return true;
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook:', data.description);
      return false;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook:', error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞
async function checkBotUpdates() {
  // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
  if (isCheckingUpdates) {
    console.log('‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É: –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
    return;
  }
  
  isCheckingUpdates = true;
  
  try {
    await _checkBotUpdatesInternal();
  } finally {
    isCheckingUpdates = false;
  }
}

// –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
async function _checkBotUpdatesInternal() {
  const lastUpdateFile = path.join(dataDir, 'last_update_id.json');
  let lastUpdateId = 0;
  
  try {
    const lastUpdateData = JSON.parse(fs.readFileSync(lastUpdateFile, 'utf-8'));
    lastUpdateId = lastUpdateData.id || 0;
  } catch {
    // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å 0
  }

  try {
    const offset = lastUpdateId > 0 ? lastUpdateId + 1 : 0;
    const url = `https://api.telegram.org/bot${telegram.botToken}/getUpdates?offset=${offset}&timeout=30`;
    
    const response = await fetch(url, {
      method: 'GET',
      headers: { 'Content-Type': 'application/json' },
    });
    
    if (!response.ok) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 409 Conflict
      if (response.status === 409) {
        conflictErrorCount++;
        
        if (conflictErrorCount === 1) {
          console.warn('‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç (HTTP 409): –±–æ—Ç —É–∂–µ –ø–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –¥—Ä—É–≥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞');
          console.warn('üîß –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å webhook...');
          await deleteWebhook();
          return; // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        }
        
        if (conflictErrorCount >= MAX_CONFLICT_ERRORS) {
          console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫');
          console.error('üìã –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
          console.error('   1. –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ (–ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ –Ω–∞ –¥—Ä—É–≥–æ–º —Å–µ—Ä–≤–µ—Ä–µ)');
          console.error('   2. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω webhook, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å');
          console.error('   3. –î—Ä—É–≥–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç');
          console.error('');
          console.error('üîß –†–µ—à–µ–Ω–∏–µ: –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞');
          
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
          conflictErrorCount = 0;
        }
        return;
      }
      
      throw new Error(`HTTP ${response.status}`);
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
    if (conflictErrorCount > 0) {
      console.log('‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç —É—Å—Ç—Ä–∞–Ω–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É');
      conflictErrorCount = 0;
    }
    
    const data = await response.json();
    
    if (data.ok && data.result && Array.isArray(data.result)) {
      for (const update of data.result) {
        if (update.update_id > lastUpdateId) {
          lastUpdateId = update.update_id;
        }
        
        if (update.message) {
          await processTelegramMessage(update.message);
        }
      }
      
      fs.writeFileSync(lastUpdateFile, JSON.stringify({ id: lastUpdateId }, null, 2), 'utf-8');
    }
  } catch (error) {
    // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ 409 –ø–æ–≤—Ç–æ—Ä–Ω–æ
    if (!error.message.includes('409')) {
      console.error('Error checking bot updates:', error.message);
    }
  }
}

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
const { handleTelegramMessage } = await import('./telegram-bot.js');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function processTelegramMessage(message) {
  try {
    const response = await handleTelegramMessage(message);
    if (response) {
      await sendTelegram(response.text, false, response.chat_id);
    }
  } catch (error) {
    console.error('Error processing telegram message:', error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
async function setBotCommands() {
  try {
    const commands = [
      { command: 'start', description: 'üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
      { command: 'help', description: '‚ùì –ü–æ–º–æ—â—å –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥' },
      { command: 'spot', description: 'üÖøÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–º–µ—Ä –ø–∞—Ä–∫–æ–≤–æ—á–Ω–æ–≥–æ –º–µ—Å—Ç–∞' },
      { command: 'status', description: 'üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å' },
      { command: 'cancel', description: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ' },
    ];

    const url = `https://api.telegram.org/bot${telegram.botToken}/setMyCommands`;
    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ commands }),
    });

    const data = await response.json();
    
    if (data.ok) {
      console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      return true;
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥:', data.description);
      return false;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥:', error.message);
    return false;
  }
}

export { checkBotUpdates, deleteWebhook, setBotCommands };