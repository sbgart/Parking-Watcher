// config.js - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
import dotenv from 'dotenv';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
const isTestMode = process.env.NODE_ENV === 'test';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
if (isTestMode) {
  dotenv.config({ path: '.env.test' });
  console.log('üîß –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞');
} else {
  dotenv.config();
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const requiredEnvVars = ['BOT_TOKEN', 'CHAT_ID'];
const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);

if (missingVars.length > 0) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', missingVars.join(', '));
  console.error('–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example');
  process.exit(1);
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
export const config = {
  // Telegram Bot
  telegram: {
    botToken: process.env.BOT_TOKEN,
    chatId: process.env.CHAT_ID,
  },

  // API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  api: {
    url: process.env.API_URL || 'https://sibakademstroy.brusnika.ru/api/parking_spaces/?building=286&floor=-2&limit=300',
    timeout: parseInt(process.env.API_TIMEOUT || '10000'),
    retryAttempts: parseInt(process.env.API_RETRY_ATTEMPTS || '3'),
    retryDelay: parseInt(process.env.API_RETRY_DELAY || '1000'),
  },

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  monitoring: {
    interval: parseInt(process.env.INTERVAL_MIN || '1') * 60 * 1000, // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    initialSilent: process.env.INITIAL_SILENT === 'true',
    isTestMode: isTestMode, // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
  },

  // –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
  database: {
    path: isTestMode ? './data/test_parking.db' : (process.env.DB_PATH || './data/parking.db'),
  },

  // –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π
  messages: {
    template: process.env.MESSAGE_TEMPLATE || `{{header}} ‚Äî {{timestamp}}
–í—Å–µ–≥–æ –º–µ—Å—Ç: {{total}}
–°–≤–æ–±–æ–¥–Ω–æ: {{available}}
–ù–æ–º–µ—Ä–∞: {{numbers}}
{{my_spot_status}}`,
    
    alertTemplate: process.env.ALERT_TEMPLATE || '‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –í–∞—à–µ –ø–∞—Ä–∫–æ–≤–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ <code>{{spot_number}}</code> —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç–æ!',
    
    helpMessage: `ü§ñ <b>–ü–∞—Ä–∫–æ–≤–æ—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
<code>/spot [–Ω–æ–º–µ—Ä]</code> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–º–µ—Ä –ø–∞—Ä–∫–æ–≤–æ—á–Ω–æ–≥–æ –º–µ—Å—Ç–∞
<code>/status</code> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–∞
<code>/cancel</code> - –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
<code>/help</code> - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞`,
  },
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
export const { telegram, api, monitoring, database, messages } = config;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
export function validateConfig() {
  const errors = [];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  if (isNaN(config.monitoring.interval) || config.monitoring.interval <= 0) {
    errors.push('INTERVAL_MIN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
  }

  if (isNaN(config.api.timeout) || config.api.timeout <= 0) {
    errors.push('API_TIMEOUT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
  }

  if (isNaN(config.api.retryAttempts) || config.api.retryAttempts < 0) {
    errors.push('API_RETRY_ATTEMPTS –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
  try {
    new URL(config.api.url);
  } catch {
    errors.push('API_URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º URL');
  }

  if (errors.length > 0) {
    console.error('‚ùå –û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:');
    errors.forEach(error => console.error(`  - ${error}`));
    return false;
  }

  return true;
}