// parking-monitor.js
import { getFullList, diff, isAvailable } from './api-client.js';
import { loadState, saveState } from './state-manager.js';
import { sendTelegram, MESSAGE_TEMPLATE, ALERT_TEMPLATE, CHAT_ID, formatSpotStatusForTemplate, formatSpotStatusChangeMessage } from './notification-manager.js';

async function tick(initial = false) {
 const now = new Date().toLocaleString('ru-RU');
  const state = loadState();

  const { total, available, numbers, all } = await getFullList();
  const { appeared, disappeared } = diff(state.numbers || [], numbers);

  // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –ø–∞—Ä–∫–æ–≤–æ—á–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç–∞ (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è)
  const { getUserSettings } = await import('./database.js');
  const userSettings = getUserSettings(CHAT_ID);
 const MY_PARKING_SPOT = userSettings ? userSettings.parking_spot : null;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –∑–∞–¥–∞–Ω–æ
 let mySpotStatus = null;
  if (MY_PARKING_SPOT) {
    const mySpot = all.find(x => x.number === parseInt(MY_PARKING_SPOT));
    if (mySpot) {
      mySpotStatus = isAvailable(mySpot.status) ? '—Å–≤–æ–±–æ–¥–Ω–æ' : '–∑–∞–Ω—è—Ç–æ';
    }
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—ã–ª–∏ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  const spotStatusChanged = MY_PARKING_SPOT && state.mySpotStatus !== null && state.mySpotStatus !== mySpotStatus;
  const changed = appeared.length > 0 || disappeared.length > 0 ||
                  (state.available !== null && state.available !== available) ||
                  spotStatusChanged;

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —à–∞–±–ª–æ–Ω–∞
  const header = changed ? '–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∫–æ–≤–∫–∏' : '–°—Ç–∞—Ç—É—Å –ø–∞—Ä–∫–æ–≤–∫–∏';
  
  // –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
  const templateVars = {
    header: `<b>${header}</b>`,
    timestamp: now,
    total: total,
    available: available,
    numbers: numbers.length ? numbers.join(', ') : '‚Äî',
    my_spot_status: ''
  };

  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–µ—Å—Ç–µ
  if (MY_PARKING_SPOT) {
    let mySpotText = formatSpotStatusForTemplate(MY_PARKING_SPOT, mySpotStatus);
    templateVars.my_spot_status = mySpotText;
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  let text = MESSAGE_TEMPLATE
    .replace('{{header}}', templateVars.header)
    .replace('{{timestamp}}', templateVars.timestamp)
    .replace('{{total}}', templateVars.total)
    .replace('{{available}}', templateVars.available)
    .replace('{{numbers}}', templateVars.numbers)
    .replace('{{my_spot_status}}', templateVars.my_spot_status);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–µ–≥–æ –º–µ—Å—Ç–∞
  if (spotStatusChanged) {
    const statusChangeText = formatSpotStatusChangeMessage(MY_PARKING_SPOT, mySpotStatus);
    text += '\n' + statusChangeText;
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –º–µ—Å—Ç–æ –∑–∞–Ω—è—Ç–æ
    if (mySpotStatus === '–∑–∞–Ω—è—Ç–æ') {
      const alertText = ALERT_TEMPLATE
        .replace('{{spot_number}}', MY_PARKING_SPOT);
      text += '\n' + alertText;
    }
  }
  
  if (changed) {
    if (appeared.length) text += `\n‚ûï –ü–æ—è–≤–∏–ª–∏—Å—å: ${appeared.join(', ')}`;
    if (disappeared.length) text += `\n‚ûñ –ò—Å—á–µ–∑–ª–∏: ${disappeared.join(', ')}`;
  }

   // –û—Ç–ø—Ä–∞–≤–∫–∞: –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏—Ö–æ–µ, –∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö ‚Äî —Å–æ –∑–≤—É–∫–æ–º
   const silent = initial ? true : !changed;
   await sendTelegram(text, silent);

   saveState({ numbers, available, mySpotStatus });

   // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–≤–æ–∏ –º–µ—Å—Ç–∞
   await checkAllUserSpots(all);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –º–µ—Å—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function checkAllUserSpots(allSpots) {
  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const { getAllUserSettings } = await import('./database.js');
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–≤–æ–∏ –º–µ—Å—Ç–∞
  const users = getAllUserSettings();
  
  for (const user of users) {
    const { chat_id, parking_spot } = user;
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    if (chat_id === CHAT_ID) {
      continue;
    }
    
    if (parking_spot) {
      const spot = allSpots.find(x => x.number === parking_spot);
      const spotStatus = spot ? (isAvailable(spot.status) ? '—Å–≤–æ–±–æ–¥–Ω–æ' : '–∑–∞–Ω—è—Ç–æ') : '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ';
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let spotStatusFormatted;
      if (spotStatus === '—Å–≤–æ–±–æ–¥–Ω–æ') {
        spotStatusFormatted = `üü¢ <b>${spotStatus}</b>`; // –ñ–∏—Ä–Ω—ã–π –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ
      } else if (spotStatus === '–∑–∞–Ω—è—Ç–æ') {
        spotStatusFormatted = `üî¥ <b><s>${spotStatus}</s></b>`; // –ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π –¥–ª—è –∑–∞–Ω—è—Ç–æ–≥–æ
      } else {
        spotStatusFormatted = spotStatus; // –ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
      }
      
      const userMessage = [
        `<b>–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–∞</b> ‚Äî ${new Date().toLocaleString('ru-RU')}`,
        `–í–∞—à–µ –º–µ—Å—Ç–æ (<code>${parking_spot}</code>): ${spotStatusFormatted}`,
        `–í—Å–µ–≥–æ –º–µ—Å—Ç: ${allSpots.length}, –°–≤–æ–±–æ–¥–Ω–æ: ${allSpots.filter(x => isAvailable(x.status)).length}`
      ].join('\n');
      
      try {
        await sendTelegram(userMessage, false, chat_id);
      } catch (error) {
        console.error(`Error sending message to user ${chat_id}:`, error.message);
      }
    }
  }
}

export { tick };